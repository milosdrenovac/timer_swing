package javaapplication108;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JSpinner.DateEditor;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingWorker;

/**
 *
 * @author Drenovac Milos
 */
public class SettingsFrame extends javax.swing.JFrame {

    int speed = 100;
    Color chosenColor;
    static final Logger log = Logger.getLogger(SettingsFrame.class.getName());
    PopupMenu pop;
    SystemTray stray;
    TrayIcon tIcon;
    MenuItem settings;
    MenuItem close;
    static boolean canceled = false;

    public SettingsFrame() throws IOException, AWTException {
        initComponents();
        stray = SystemTray.getSystemTray();
        Image i = ImageIO.read(new File("trayicon.png"));
        tIcon = new TrayIcon(i);
        stray.add(tIcon);

        settings = new MenuItem("Settings");
        close = new MenuItem("Exit");

        pop = new PopupMenu();
        pop.add(settings);
        pop.add(close);

        tIcon.setPopupMenu(pop);

        settings.addActionListener((ActionEvent e) -> {
            setVisible(true);
        });
        close.addActionListener((ActionEvent e) -> {
            System.exit(0);
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jsOnTime = new javax.swing.JSpinner();
        jsCountodwn = new javax.swing.JSpinner();
        cbOnTime = new javax.swing.JCheckBox();
        cbCountdown = new javax.swing.JCheckBox();
        butColor = new javax.swing.JButton();
        jlabColor = new javax.swing.JLabel();
        jlabSpeed = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        butStart = new javax.swing.JButton();
        butStop = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setTitle("Settings");
        setLocation(new java.awt.Point(600, 150));

        jsOnTime.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        Calendar calendar = Calendar.getInstance();
        Date start = calendar.getTime();

        jsOnTime.setModel(new SpinnerDateModel(start, null, null, Calendar.MINUTE));
        DateEditor editor = new JSpinner.DateEditor(jsOnTime, "HH:mm dd MMM yy");
        jsOnTime.setEditor(editor);
        jsOnTime.setToolTipText("hh:mm");
        jsOnTime.setMinimumSize(new java.awt.Dimension(60, 30));

        jsCountodwn.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jsCountodwn.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jsCountodwn.setToolTipText("");

        cbOnTime.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        cbOnTime.setText("Set on time:");
        cbOnTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cbOnTimeStateChanged(evt);
            }
        });

        cbCountdown.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        cbCountdown.setText("Set countdown (min): ");
        cbCountdown.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cbCountdownStateChanged(evt);
            }
        });

        butColor.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        butColor.setText("Choose color");
        butColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butColorActionPerformed(evt);
            }
        });

        jlabColor.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jlabColor.setText("Chosen color: ");

        jlabSpeed.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jlabSpeed.setText("Speed:");

        jSlider1.setMajorTickSpacing(500);
        jSlider1.setMaximum(3000);
        jSlider1.setMinimum(100);
        jSlider1.setMinorTickSpacing(100);
        jSlider1.setPaintTicks(true);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        butStart.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        butStart.setText("Start");
        butStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butStartActionPerformed(evt);
            }
        });

        butStop.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        butStop.setText("Stop");
        butStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butStopActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("fast");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("slow");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(115, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jlabSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(butStart, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(84, 84, 84)
                            .addComponent(butStop, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2))
                        .addComponent(jSlider1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbCountdown)
                            .addComponent(cbOnTime))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jsOnTime, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(jsCountodwn, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(butColor, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jlabColor, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jsOnTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbOnTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jsCountodwn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCountdown))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlabColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butColor, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlabSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butStart, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butStop, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butColorActionPerformed
        chosenColor = getColor();
        jlabColor.setText("Chosen color: " + getColorName(chosenColor));
    }//GEN-LAST:event_butColorActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        speed = ((JSlider) evt.getSource()).getValue();

    }//GEN-LAST:event_jSlider1StateChanged

    private void cbOnTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cbOnTimeStateChanged
        if (cbOnTime.isSelected()) {
            cbCountdown.setEnabled(false);
            jsCountodwn.setEnabled(false);
        } else{
            cbCountdown.setEnabled(true);
            jsCountodwn.setEnabled(true);
        }
    }//GEN-LAST:event_cbOnTimeStateChanged

    private void cbCountdownStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cbCountdownStateChanged
        if (cbCountdown.isSelected()) {
            cbOnTime.setEnabled(false);
            jsOnTime.setEnabled(false);
        } else {
            cbOnTime.setEnabled(true);
            jsOnTime.setEnabled(true);
        }
    }//GEN-LAST:event_cbCountdownStateChanged

    private void butStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStartActionPerformed
        if (cbCountdown.isSelected() || cbOnTime.isSelected()) {
            enableComponents(false);
            butStop.setEnabled(true);
            repaint();
        }
        start();

    }//GEN-LAST:event_butStartActionPerformed

    private void butStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStopActionPerformed
        enableComponents(true);
        if(cbCountdown.isSelected()||cbOnTime.isSelected())
            canceled = true;
    }//GEN-LAST:event_butStopActionPerformed

    /**
     * Parsing name of chosen colors. Returns String value of selected color
     * (either by RGB code or by name)
     *
     * @param c Color object.
     * @return
     */
    public String getColorName(Color c) {
        for (Field f : Color.class.getFields()) {
            try {
                if (f.getType() == Color.class && f.get(null).equals(c)) {
                    return f.getName();
                }
            } catch (java.lang.IllegalAccessException e) {
            }
        }
        return String.valueOf("RGB code " + c.getRGB());
    }

    
    /**
     * Toggle enable components on current panel.
     *
     * @param b
     */
    public void enableComponents(boolean b) {
        Component[] comp = this.getContentPane().getComponents();
        for (Component component : comp) {
            component.setEnabled(b);
        }
    }

    /**
     * Starts the countdown logic. When timer is finished calls fire() method.
     */
    public void start() {
        if (!cbCountdown.isSelected() && !cbOnTime.isSelected()) {
            JOptionPane.showMessageDialog(null, "Please select from options above.", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else if (cbCountdown.isSelected() || cbOnTime.isSelected()) {
            if (chosenColor == null) {
                JOptionPane.showMessageDialog(null, "You did not choose any color, color is auto set to black", "Information", JOptionPane.INFORMATION_MESSAGE);
                chosenColor = Color.BLACK;
            }
            if (speed < 300) {
                JOptionPane.showMessageDialog(null, "WARNING MAY CAUSE SEIZURES", "WARNING - Photosensitive Epilepsy", JOptionPane.WARNING_MESSAGE);
            }
            log.info("Starting countdown.");
            SwingWorker sw = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {

                    if (cbCountdown.isSelected()) {
                        int time = Integer.parseInt(jsCountodwn.getValue().toString()) * 60000;
                        while (time > 0) {
                            Thread.sleep(1);
                            time--;
                            if (canceled) {
                                this.cancel(canceled);
                                break;
                            }
                        }

                    } else if (cbOnTime.isSelected()) {
                        Calendar currentTime = Calendar.getInstance();
                        Calendar targetTime = Calendar.getInstance();
                        targetTime.setTime((Date) jsOnTime.getValue());

                        while ((currentTime.getTime().compareTo(targetTime.getTime())) != 0) {
                            currentTime = Calendar.getInstance();
                            Thread.sleep(1);
                            if (canceled) {
                                this.cancel(canceled);
                                break;
                            }
                        }
                    }
                    if (!canceled) {
                        fire();
                    } else {
                        log.info("Countdown canceled");
                        tIcon.displayMessage("Stopped", "Countdown canceled", TrayIcon.MessageType.INFO);
                        canceled = false;
                        cbCountdown.setSelected(false);
                        cbOnTime.setSelected(false);
                    }
                    return null;
                }
            };
            sw.execute();

        }

    }

    /**
     * Starts the alarm window.
     *
     * @throws InterruptedException
     */
    @SuppressWarnings("null")
    public void fire() throws InterruptedException, IOException {
        log.info("Alarm started.");

        JFrame frame = new JFrame();
        frame.setSize(new Dimension(1000, 800));
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(HIDE_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);
        frame.setVisible(true);
        
        panel.setBackground(chosenColor);
        Random random = new Random();
        
        while (true) {
            Thread.sleep(speed);
            panel.setBackground(Color.WHITE);
            Thread.sleep(speed);
            panel.setBackground(new Color(random.nextInt(256), random.nextInt(256), random.nextInt(256)));
            if (canceled || !frame.isVisible()) {
                frame.dispose();
                tIcon.displayMessage("Stopped", "Alarm canceled", TrayIcon.MessageType.INFO);
                canceled = false;
                break;
            }

        }

    }

    /**
     * Opens JColorChooser dialog. If no color is selected automatically returns
     * Color.BLACK.
     *
     * @return chosen color
     */
    public Color getColor() {
        Color c = JColorChooser.showDialog(null, "Choose your color", Color.BLACK);
        if (c == null) {
            JOptionPane.showMessageDialog(null, "Color black auto selected.", "Information", JOptionPane.INFORMATION_MESSAGE);
            c = Color.BLACK;
        }
        return c;
    }

    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new SettingsFrame().setVisible(true);
            } catch (IOException | AWTException ex) {
                Logger.getLogger(SettingsFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butColor;
    private javax.swing.JButton butStart;
    private javax.swing.JButton butStop;
    private javax.swing.JCheckBox cbCountdown;
    private javax.swing.JCheckBox cbOnTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JLabel jlabColor;
    private javax.swing.JLabel jlabSpeed;
    private javax.swing.JSpinner jsCountodwn;
    private javax.swing.JSpinner jsOnTime;
    // End of variables declaration//GEN-END:variables
}
